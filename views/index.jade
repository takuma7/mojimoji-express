extends layout

block content
  // h1= title
  canvas#myCanvas(style='width:800px; height:600px; border: 1px solid #111')
  script(type='text/paperscript', canvas='myCanvas').
    var host;
    if("#{env}" == "production"){
      host = location.origin;
    }else{
      host = 'http://localhost';
    }
    var socket = io.connect('#{host}');

    socket.on('connect', function(data){
      console.log(socket.socket.sessionid);
    });

    var clients = {};

    socket.on('init', function (data) {
      console.log(data);
      $('#myCanvas').css({width:data.canvas.width + 'px', height:data.canvas.height + 'px'});
      clients = data.clients;
      for(var id in clients){
        if(clients[id].x && clients[id].y){
          clients[id].pointText = new PointText(new Point(0,0));
          clients[id].pointText.content = clients[id].message;
          clients[id].pointText.position = new Point(clients[id].x, clients[id].y);
          clients[id].circle = new Shape.Circle(new Point(clients[id].x, clients[id].y), clients[id].r);
          clients[id].circle.strokeColor = 'black';
        }
      }
    });

    socket.on('position updated', function (data) {
      for(var id in data.clients){
        if( data.clients[id].x && data.clients[id].y ){
          clients[id].x = data.clients[id].x;
          clients[id].y = data.clients[id].y;
          if(clients[id].pointText){
            clients[id].pointText.position = new Point(clients[id].x, clients[id].y);
            clients[id].circle.position = new Point(clients[id].x, clients[id].y);
          }else{
            clients[id].pointText = new PointText(new Point(0, 0));
            clients[id].pointText.content = clients[id].message;
            clients[id].pointText.position = new Point(clients[id].x, clients[id].y);
            clients[id].circle = new Shape.Circle(new Point(clients[id].x, clients[id].y), clients[id].r);
            clients[id].circle.strokeColor = 'black';
          }
        }
      }
    });

    function onFrame(event){
    }

    socket.on('client added', function(data){
      console.log('user connected: ' + data.id);
      clients[data.id] = {id: data.id};
    });
    socket.on('client deleted', function(data){
      console.log('user disconnected: ' + data.id);
      clients[data.id].circle.remove();
      clients[data.id].pointText.remove();
      delete clients[data.id];
    });
