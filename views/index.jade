extends layout

block content
  // h1= title
  canvas#myCanvas(style='width:800px; height:600px; border: 1px solid #111')
  script(type='text/paperscript', canvas='myCanvas').
    var socket = io.connect(location.origin);

    socket.on('connect', function(data){
      console.log(socket.socket.sessionid);
    });

    var clients = {};
    var m = 10;

    socket.on('init', function (data) {
      console.log(data);
      $('#myCanvas').css({width:data.canvas.width + 'px', height:data.canvas.height + 'px'});
      clients = data.clients;
      for(var id in clients){
        if(clients[id].x && clients[id].y){
          clients[id].pointText = new PointText(new Point(0,0));
          clients[id].pointText.content = clients[id].message;
          clients[id].pointText.position = new Point(clients[id].x, clients[id].y);
          clients[id].circle = new Shape.Circle(new Point(clients[id].x, clients[id].y), clients[id].r);
          clients[id].circle.strokeColor = 'black';
        }
      }
    });

    socket.on('gravity updated', function(data) {
      console.log(data);
      if( !clients[data.id].circle || !clients[data.id].pointText ){
        return;
      }
      if( !clients[data.id].x ){
        clients[data.id].x = width/2;
        clients[data.id].y = height/2;
      }
      var gx = data.gx;
      var gy = data.gy;
      var x = clients[data.id].x;
      var y = clients[data.id].y;
      var r = clients[data.id].r;
      if((x <= r && gx < 0) ||
         (width - x <= r && gx > 0)){
        gx *= -1;
      }
      if((y <= r && gy < 0) ||
         (width - y <= r && gy > 0)){
        gy *= -1;
      }
      clients[data.id].x += m * gx;
      clients[data.id].y += m * gy;
      clients[data.id].pointText.position = new Point(x, y);
      clients[data.id].circle.position = new Point(x, y);
    });

    socket.on('radius updated', function(data) {
      if( clients[data.id].circle ){
        clients[data.id].circle.radius = data.r;
      }else{
        clients[data.id].circle = new Shape.Circle(new Point(clients[data.id].x, clients[data.id].y), data.r);
        clients[data.id].circle.strokeColor = 'black';
      }
    });

    function onFrame(event){
    }

    socket.on('client added', function(data){
      console.log('user connected: ' + data.id);
      clients[data.id] = {id: data.id};
    });
    socket.on('client deleted', function(data){
      console.log('user disconnected: ' + data.id);
      clients[data.id].circle.remove();
      clients[data.id].pointText.remove();
      delete clients[data.id];
    });
