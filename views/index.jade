extends layout

block content
  // h1= title
  canvas#myCanvas(style='width:800px; height:600px; border: 1px solid #111')
  script(type='text/paperscript', canvas='myCanvas').
    var socket = io.connect(location.origin);

    socket.on('connect', function(data){
      console.log(socket.socket.sessionid);
    });

    var clients = {};
    var m = 10;
    var width = 800;
    var height = 600;

    socket.on('init', function (data) {
      console.log(data);
      $('#myCanvas').css({width:data.canvas.width + 'px', height:data.canvas.height + 'px'});
      width = data.canvas.width;
      height = data.canvas.height;
      clients = data.clients;
      for(var id in clients){
        if(clients[id].x && clients[id].y){
          clients[id].pointText = new PointText(view.center);
          clients[id].pointText.content = clients[id].name;
          clients[id].pointText.position = new Point(clients[id].x, clients[id].y);
          clients[id].circle = new Shape.Circle(new Point(clients[id].x, clients[id].y), clients[id].r);
          clients[id].circle.strokeColor = 'black';
        }
      }
    });

    socket.on('update', function (data) {
      for(var id in data.clients){
        if( data.clients[id].x && data.clients[id].y ){
          clients[id].x = data.clients[id].x;
          clients[id].y = data.clients[id].y;
          if(!clients[id].pointText){
            clients[id].pointText = new PointText(new Point(0, 0));
            clients[id].pointText.content = clients[id].name;
          }
          if(!clients[id].circle){
            clients[id].circle = new Shape.Circle(new Point(clients[id].x, clients[id].y), clients[id].r);
            clients[id].circle.strokeColor = 'black';
          }
          clients[id].pointText.position = new Point(clients[id].x, clients[id].y);
          clients[id].circle.position = new Point(clients[id].x, clients[id].y);
          clients[id].circle.radius = clients[id].r;
          //TODO: implement below
          if(clients[id].isAttacking){
            if(!clients[id].attackCircle){
              clients[id].attackCircle = new Shape.Circle(new Point(clients[id].attackX, clients[id].attackY), clients[id].attackR);
            }
          }else{
            if(clients[id].attackCircle){
              clients[id].attackCircle.remove();
              delete clients[id].attackCircle;
            }
          }
          if(clients[id].isAttackable){
            clients[id].circle.strokeColor = 'red';
          }else{
          }
          if(clients[id].isCharging){
            clients[id].circle.strokeColor = 'green';
          }else{
          }
          if(clients[id].isShielding){
            clients[id].circle.strokeColor = 'blue';
          }else{
          }
          if(!clients[id].isShielding && !clients[id].isCharging){
            clients[id].circle.strokeColor = 'black';
          }
        }
      }
    });

    socket.on('name updated', function(data){
      console.log(data);
      console.log(clients);
      clients[data.id].name = data.name;
      if( clients[data.id].pointText ){
        clients[data.id].pointText.content = data.name;
        clients[data.id].pointText.position = new Point(clients[data.id].x, clients[data.id].y);
      }else{
        clients[data.id].pointText = new PointText(view.center);
        clients[data.id].pointText.content = data.name;
        clients[data.id].pointText.position = new Point(width/2, height/2);        }
    });

    socket.on('radius updated', function(data) {
      if( clients[data.id].circle ){
        clients[data.id].circle.radius = data.r;
      }else{
        clients[data.id].circle = new Shape.Circle(new Point(clients[data.id].x, clients[data.id].y), data.r);
        clients[data.id].circle.strokeColor = 'black';
      }
    });

    socket.on('client added', function(data){
      console.log('user connected: ' + data.id);
      clients[data.id] = data.client;
    });
    socket.on('client deleted', function(data){
      console.log('user disconnected: ' + data.id);
      clients[data.id].circle.remove();
      clients[data.id].pointText.remove();
      delete clients[data.id];
    });
